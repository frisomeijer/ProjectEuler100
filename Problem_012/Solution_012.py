'''
Problem 12:
    
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
        
What is the value of the first triangle number to have over five hundred divisors?
'''

import time
import math
start_time = time.time()

def calc_n_divisors(number):
    divisor_list=[]
    for i in range(1,math.ceil(math.sqrt(number)+1)):
        if number%i==0:
            divisor_list.append(i)
            if i**2 != number:
                divisor_list.append(number/i)          
    return len(divisor_list)

n_divisors=1
i=1
while n_divisors<500:
    triangle_number=i*(i+1)/2
    n_divisors=calc_n_divisors(triangle_number)
    i=i+1
    
print(triangle_number)
# calculation time: 5.428996324539185 seconds
print("calculation time: %s seconds" % (time.time() - start_time))   
    